 public class BitOperator{
 	public static void main(String[] args){
 		// 0表示正数 1表示负数
 		//正数三码合一
 		//负数反码 = 原码符号位不变 所有位取反
 		//负数补码 = 反码 +1 
        //1、先得到2的补码 => 2的原码 00000000 00000000 00000000 00000010
        //2的补码 00000000 00000000 00000000 00000010
        //3的补码 -> 3的原码 00000000 00000000 00000000 00000011
        // 按位&
        //00000000 00000000 00000000 00000010
        //00000000 00000000 00000000 00000011
        //00000000 00000000 00000000 00000010 运算后的补码
        //00000000 00000000 00000000 00000010 运算后的源码
        //再转为十进制
 		System.out.println(2&3);//2

 		//取反 0->1 1->0
 		//补码 -> 原码 -> 反码
 		//1、先得到-2的原码 10000000 00000000 00000000 000000010
 		//2、补码 ->> 反码  11111111 11111111 11111111 111111101
 		//3、补码 = 反码+1  11111111 11111111 11111111 111111110
 		//4、~-2的操作      00000000 00000000 00000000 000000001 运算后的补码
 		//5、运算后的原码   00000000 00000000 00000000 00000001
 		//十进制

 		System.out.println(~-2);//1

 		//补码  00000000 00000000 00000000 00000010
 		//操作  11111111 11111111 11111111 11111101
 		//反码  11111111 11111111 11111111 11111100
 		//原码  10000000 00000000 00000000 00000011
 		//十进制
 		System.out.println(~2);//-3

 		//位运算符
 		//算数右移 >> 低位溢出 符号位不变 并用符号位补溢出的高位
 		//算数左移 << 符号位不变 低位补0
 		//逻辑右移 >>> 也叫无符号右移 运算规则是：低位溢出 高位补0

 		int a = 1>>2;//1 = 0...0 00000001 => 00000000 本质是1/2/2 = 0
 		int c = 1<<2;//1 = 0...0 00000001 => 00000100 本质是1*2*2 = 4
 		System.out.println(a);
 		System.out.println(c);

 		int b = 35>>>2;
 		System.out.println(b);


 	}
 }